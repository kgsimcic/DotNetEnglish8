@model DotNetProject8.ViewModels.ConsultantViewModelList
@using Newtonsoft.Json

@{
    ViewBag.Title = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<section>
    <label for="consultant">Select Consultant you wish to make an appointment for</label>
    <div class="form-group">
        @Html.DropDownListFor(m => m.SelectedConsultantId, Model.ConsultantsList, "- Please select -", new { @class = "form-control", @id = "SelectedConsultantId" })
        @Html.ValidationMessageFor(m => m.SelectedConsultantId)
    </div>

    <div class="columns">
    <div class="column-left">
        <div id="nav"></div>
    </div>
        <div class="column-main">
            <div id="calendarPicker"></div>
        </div>
    </div>
    <script type="text/javascript">

        document.addEventListener("DOMContentLoaded", function () {

            var consultantCalendars = @Html.Raw(JsonConvert.SerializeObject(Model.ConsultantCalendars));
            var consultantId = document.getElementById("SelectedConsultantId");
            var availableDates = consultantCalendars.find(c => c.ConsultantId == consultantId.value).AvailableDates.map(d => new Date(d));

            var enableAvailableDates = function (date, availableDateList) {
                return availableDateList.some(d => d.getFullYear() === date.getFullYear() &&
                    d.getMonth() === date.getMonth() &&
                    d.getDate() === date.getDate());
            }

            const picker = flatpickr("#calendarPicker", {
                inline: true,
                onChange: function (selectedDate, dateStr, instance) {

                    var consultants = @Html.Raw(JsonConvert.SerializeObject(Model.Consultants));
                    var selectedConsultant = consultants.find(c => c.Id == consultantId.value);

                    fetch('/Booking/CreateBooking', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            date: dateStr,
                            consultant: selectedConsultant
                        })
                    }).then(response => response.text())
                        .then(html => {
                            document.body.innerHTML = html;
                        });
                },
                defaultDate: new Date("@ViewBag.minDate"),
                minDate: new Date("@ViewBag.minDate"),
                maxDate: new Date("@ViewBag.maxDate"),
                enable: [
                    function (date) {
                        return enableAvailableDates(date, availableDates)
                    }
                ]
            });

            consultantId.addEventListener('change', (event) => {
                availableDates = consultantCalendars.find(c => c.ConsultantId == event.target.value).AvailableDates.map(d => new Date(d));

                picker.set("enable", [
                    function (date) {
                        return enableAvailableDates(date, availableDates)
                    }
                ])
            });
        });
    </script>
</section>